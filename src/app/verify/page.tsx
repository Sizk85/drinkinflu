'use client'

import { Navbar } from '@/components/navbar'
import { Button } from '@/components/ui/button'
import { useState } from 'react'
import { useToast } from '@/components/ui/use-toast'
import { Upload, CheckCircle, XCircle, Clock } from 'lucide-react'

export default function VerifyPage() {
  const { toast } = useToast()
  const [isUploading, setIsUploading] = useState(false)
  const [proofUrls, setProofUrls] = useState<string[]>([])
  const [applicationId, setApplicationId] = useState('')

  const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files
    if (!files || files.length === 0) return

    setIsUploading(true)

    try {
      // TODO: Upload to R2
      // Mock: ‡∏™‡∏£‡πâ‡∏≤‡∏á URLs ‡∏õ‡∏•‡∏≠‡∏°
      const mockUrls = Array.from(files).map((file, i) => 
        `https://mock.r2.dev/proof-${Date.now()}-${i}.jpg`
      )
      
      setProofUrls([...proofUrls, ...mockUrls])

      toast({
        title: '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!',
        description: `‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ${files.length} ‡πÑ‡∏ü‡∏•‡πå`,
      })
    } catch (error) {
      toast({
        title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
        description: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ',
        variant: 'destructive',
      })
    } finally {
      setIsUploading(false)
    }
  }

  const handleSubmitVerification = async () => {
    if (proofUrls.length === 0) {
      toast({
        title: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ',
        description: '‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏π‡∏õ',
        variant: 'destructive',
      })
      return
    }

    setIsUploading(true)

    try {
      const response = await fetch('/api/verify', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          applicationId: applicationId || 'temp-app-id',
          proofUrls,
        }),
      })

      const data = await response.json()

      if (!response.ok) throw new Error(data.error)

      toast({
        title: data.status === 'auto_pass' ? '‚úÖ ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö!' : '‚è≥ ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö',
        description: data.message,
      })

      // Clear form
      setProofUrls([])
    } catch (error: any) {
      toast({
        title: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
        description: error.message,
        variant: 'destructive',
      })
    } finally {
      setIsUploading(false)
    }
  }

  return (
    <div className="min-h-screen">
      <Navbar />
      
      <div className="max-w-4xl mx-auto px-6 py-12">
        <div className="mb-12">
          <h1 className="text-4xl font-bold mb-2 neon-text">‡∏™‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå</h1>
          <p className="text-muted">‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏Å‡∏£‡∏µ‡∏ô‡∏™‡∏ï‡∏≠‡∏£‡∏µ‡πà Instagram ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö üì∏</p>
        </div>

        {/* Instructions */}
        <div className="glass rounded-2xl p-6 mb-8">
          <h2 className="text-xl font-bold mb-4">‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô</h2>
          <ol className="space-y-3 text-sm text-muted list-decimal list-inside">
            <li>‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏™‡∏ï‡∏≠‡∏£‡∏µ‡πà Instagram ‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô</li>
            <li>‡∏™‡∏Å‡∏£‡∏µ‡∏ô‡∏ä‡πá‡∏≠‡∏ï‡∏™‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÇ‡∏û‡∏™‡∏ï‡πå (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏´‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô, location, ‡πÅ‡∏ó‡πá‡∏Å)</li>
            <li>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà</li>
            <li>‡∏Å‡∏î‡∏™‡πà‡∏á - ‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</li>
          </ol>
        </div>

        {/* Upload Section */}
        <div className="glass rounded-2xl p-6 mb-8">
          <h2 className="text-xl font-bold mb-4">‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</h2>

          <div className="border-2 border-dashed border-border rounded-2xl p-12 text-center mb-6">
            <Upload size={48} className="mx-auto mb-4 text-muted" />
            <p className="text-muted mb-4">‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏≤‡∏ß‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà</p>
            <input
              type="file"
              multiple
              accept="image/*"
              onChange={handleFileUpload}
              className="hidden"
              id="file-upload"
            />
            <label htmlFor="file-upload">
              <Button type="button" asChild>
                <span className="cursor-pointer">
                  ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå
                </span>
              </Button>
            </label>
          </div>

          {/* Preview uploaded files */}
          {proofUrls.length > 0 && (
            <div>
              <div className="text-sm font-medium mb-3">‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ({proofUrls.length})</div>
              <div className="grid grid-cols-3 gap-4">
                {proofUrls.map((url, i) => (
                  <div key={i} className="relative aspect-square rounded-xl bg-card border border-border overflow-hidden">
                    <div className="absolute inset-0 flex items-center justify-center">
                      <CheckCircle className="text-green-500" size={32} />
                    </div>
                    <div className="absolute bottom-2 left-2 text-xs bg-black/70 px-2 py-1 rounded">
                      ‡∏£‡∏π‡∏õ {i + 1}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>

        {/* Submit */}
        <div className="flex gap-4">
          <Button
            type="button"
            variant="outline"
            className="flex-1"
            onClick={() => setProofUrls([])}
            disabled={proofUrls.length === 0}
          >
            ‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
          </Button>
          <Button
            type="button"
            className="flex-1"
            onClick={handleSubmitVerification}
            disabled={isUploading || proofUrls.length === 0}
          >
            {isUploading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á...' : '‡∏™‡πà‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô'}
          </Button>
        </div>

        {/* Status Examples */}
        <div className="mt-12 glass rounded-2xl p-6">
          <h2 className="text-xl font-bold mb-4">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</h2>
          <div className="space-y-3">
            <div className="flex items-center gap-3 p-3 bg-green-500/10 rounded-xl">
              <CheckCircle className="text-green-500" size={20} />
              <div>
                <div className="font-medium">‡∏ú‡πà‡∏≤‡∏ô (AI ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)</div>
                <div className="text-xs text-muted">AI Score ‚â• 85%</div>
              </div>
            </div>
            <div className="flex items-center gap-3 p-3 bg-yellow-500/10 rounded-xl">
              <Clock className="text-yellow-500" size={20} />
              <div>
                <div className="font-medium">‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á</div>
                <div className="text-xs text-muted">AI Score 70-84%</div>
              </div>
            </div>
            <div className="flex items-center gap-3 p-3 bg-red-500/10 rounded-xl">
              <XCircle className="text-red-500" size={20} />
              <div>
                <div className="font-medium">‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô</div>
                <div className="text-xs text-muted">AI Score &lt; 70%</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

